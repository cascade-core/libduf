<?php
/*
 * Copyright (c) 2015, Josef Kufner  <josef@kufner.cz>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

namespace Duf;

/**
 * Compile form definition into a class.
 */
class FormCompiler
{
	protected $form_name;
	protected $form_def;
	protected $toolbox;
	protected $readonly;

	/**
	 * @name Form flags
	 * @{
	 */
	const READ_ONLY = 0x0001;		///< Form must be read only
	/// @}


	/**
	 * Constructor.
	 *
	 * @param $form_name is globally unique name of this form, only A-Z, a-z, 0-9 and underscore allowed.
	 * @param $form_def is the form definition.
	 * @param $toolbox is Toolbox used for form rendering.
	 * @param $form_flags is bitmap of [@ref Form flags].
	 */
	public function __construct($form_name, $form_def, Toolbox $toolbox, $form_flags = 0)
	{
		$this->form_name = $form_name;
		$this->form_def = $form_def;
		$this->toolbox = $toolbox;
		$this->readonly = !!($form_flags & self::READ_ONLY);

		if (!preg_match('/^[A-Za-z0-9_]+$/', $this->form_name)) {
			throw new \InvalidArgumentException('Form name must contain only letters, numbers and underscores: '.$this->form_name);
		}
	}


	/**
	 * Generate source code of the form implementation.
	 */
	public function getSourceCode()
	{
		$buf = new PhpBuffer();

		// Class header
		$buf->writeComment('Form: '.$this->form_name, 'Generated by '.__CLASS__.' at '.strftime('%Y-%m-%d %H:%M:%S').'.');
		$buf->write('namespace '.__NAMESPACE__.'\GeneratedForms;');
		$buf->beginBlock('class Form_'.$this->form_name.' extends \\'.__NAMESPACE__.'\Form');

		// Render method
		$buf->beginBlock('public function render($template_engine = null)');
		$form_compiler = $this->toolbox->getFormCompiler($this->readonly ? '@view' : '@edit');
		if (is_a($form_compiler, 'Duf\\Compiler\\IFormCompiler', TRUE)) {
			$form_compiler::compileForm($this, $buf);
		} else {
			throw new RendererException('Form compiler '.$form_renderer.' must implement Duf\\Compiler\\IFormCompiler inteface.');
		}
		$buf->endBlock();

		$buf->endBlock();

		return $buf->getCode();
	}

}

